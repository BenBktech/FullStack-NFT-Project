{
  "address": "0xbe322ef7149bd702a9b05ce9bced58e95e4a32f8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6695bebbbb2aa6b3f4b6fbdd4aef1f3b4a6667efaa32c5176a3cbfe133e2e19d",
  "receipt": {
    "to": null,
    "from": "0x05da33083f4f532309df7e6d49be3ca8071fb1a0",
    "contractAddress": "0xbe322ef7149bd702a9b05ce9bced58e95e4a32f8",
    "transactionIndex": "0x3a",
    "gasUsed": "0x1875c5",
    "logsBloom": "0x
    "blockHash": "0xb5e26b9f6969fd1aba29141bb1e2a9a518cdd5e51f07c852be321acf42ab3c40",
    "transactionHash": "0x901ff283587f62f005c12580a19235d7544ca5f463b50d8544c8be632631300f",
    "logs": [],
    "blockNumber": "0x76729b",
    "cumulativeGasUsed": "0xf1baff",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fed13d0e470db568ab20ff87c3410a08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTIsERC721A.sol\":\"NFTIsERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport './IERC721A.sol';\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721 token receiver.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC721A\\r\\n *\\r\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\r\\n * Non-Fungible Token Standard, including the Metadata extension.\\r\\n * Optimized for lower gas during batch mints.\\r\\n *\\r\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\r\\n * starting from `_startTokenId()`.\\r\\n *\\r\\n * Assumptions:\\r\\n *\\r\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\r\\n    struct TokenApprovalRef {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                           CONSTANTS\\r\\n    // =============================================================\\r\\n\\r\\n    // Mask of an entry in packed address data.\\r\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n    // The bit position of `numberMinted` in packed address data.\\r\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n    // The bit position of `numberBurned` in packed address data.\\r\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n    // The bit position of `aux` in packed address data.\\r\\n    uint256 private constant _BITPOS_AUX = 192;\\r\\n\\r\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n    // The bit position of `startTimestamp` in packed ownership.\\r\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n    // The bit mask of the `burned` bit in packed ownership.\\r\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n    // The bit position of `extraData` in packed ownership.\\r\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\r\\n\\r\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\r\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\r\\n\\r\\n    // The mask of the lower 160 bits for addresses.\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\r\\n    // This limit is to prevent overflows on the address data entries.\\r\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\r\\n    // is required to cause an overflow, which is unrealistic.\\r\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\r\\n\\r\\n    // The `Transfer` event signature is given by:\\r\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\r\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\r\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n    // =============================================================\\r\\n    //                            STORAGE\\r\\n    // =============================================================\\r\\n\\r\\n    // The next token ID to be minted.\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 private _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned.\\r\\n    // See {_packedOwnershipOf} implementation for details.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..159]   `addr`\\r\\n    // - [160..223] `startTimestamp`\\r\\n    // - [224]      `burned`\\r\\n    // - [225]      `nextInitialized`\\r\\n    // - [232..255] `extraData`\\r\\n    mapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n    // Mapping owner address to address data.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..63]    `balance`\\r\\n    // - [64..127]  `numberMinted`\\r\\n    // - [128..191] `numberBurned`\\r\\n    // - [192..255] `aux`\\r\\n    mapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n    // Mapping from token ID to approved address.\\r\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // =============================================================\\r\\n    //                          CONSTRUCTOR\\r\\n    // =============================================================\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                   TOKEN COUNTING OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the starting token ID.\\r\\n     * To change the starting token ID, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next token ID to be minted.\\r\\n     */\\r\\n    function _nextTokenId() internal view virtual returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than `_currentIndex - _startTokenId()` times.\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view virtual returns (uint256) {\\r\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\r\\n        // and it is initialized to `_startTokenId()`.\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens burned.\\r\\n     */\\r\\n    function _totalBurned() internal view virtual returns (uint256) {\\r\\n        return _burnCounter;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                    ADDRESS DATA OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal virtual {\\r\\n        uint256 packed = _packedAddressData[owner];\\r\\n        uint256 auxCasted;\\r\\n        // Cast `aux` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            auxCasted := aux\\r\\n        }\\r\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\r\\n        _packedAddressData[owner] = packed;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC165\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        // The interface IDs are constants representing the first 4 bytes\\r\\n        // of the XOR of all function selectors in the interface.\\r\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\r\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        IERC721Metadata\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, it can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                     OWNERSHIPS OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\r\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n     */\\r\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\r\\n        return _unpackedOwnership(_packedOwnerships[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n     */\\r\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\r\\n        if (_packedOwnerships[index] == 0) {\\r\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the packed ownership data of `tokenId`.\\r\\n     */\\r\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() <= curr)\\r\\n                if (curr < _currentIndex) {\\r\\n                    uint256 packed = _packedOwnerships[curr];\\r\\n                    // If not burned.\\r\\n                    if (packed & _BITMASK_BURNED == 0) {\\r\\n                        // Invariant:\\r\\n                        // There will always be an initialized ownership slot\\r\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\r\\n                        // before an unintialized ownership slot\\r\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\r\\n                        // Hence, `curr` will not underflow.\\r\\n                        //\\r\\n                        // We can directly compare the packed value.\\r\\n                        // If the address is zero, packed will be zero.\\r\\n                        while (packed == 0) {\\r\\n                            packed = _packedOwnerships[--curr];\\r\\n                        }\\r\\n                        return packed;\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n     */\\r\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\r\\n        ownership.addr = address(uint160(packed));\\r\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\r\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\r\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Packs ownership data into a single uint256.\\r\\n     */\\r\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, _BITMASK_ADDRESS)\\r\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\r\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\r\\n     */\\r\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\r\\n        // For branchless setting of the `nextInitialized` flag.\\r\\n        assembly {\\r\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\r\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                      APPROVAL OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the\\r\\n     * zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        if (_msgSenderERC721A() != owner)\\r\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n                revert ApprovalCallerNotOwnerNorApproved();\\r\\n            }\\r\\n\\r\\n        _tokenApprovals[tokenId].value = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId].value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n     * for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted. See {_mint}.\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return\\r\\n            _startTokenId() <= tokenId &&\\r\\n            tokenId < _currentIndex && // If within bounds,\\r\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\r\\n     */\\r\\n    function _isSenderApprovedOrOwner(\\r\\n        address approvedAddress,\\r\\n        address owner,\\r\\n        address msgSender\\r\\n    ) private pure returns (bool result) {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, _BITMASK_ADDRESS)\\r\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\r\\n            // `msgSender == owner || msgSender == approvedAddress`.\\r\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\r\\n     */\\r\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\r\\n    {\\r\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\r\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\r\\n        assembly {\\r\\n            approvedAddressSlot := tokenApproval.slot\\r\\n            approvedAddress := sload(approvedAddressSlot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                      TRANSFER OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable virtual override {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\r\\n\\r\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\r\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // We can directly increment and decrement the balances.\\r\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the next owner.\\r\\n            // - `startTimestamp` to the timestamp of transfering.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public payable virtual override {\\r\\n        transferFrom(from, to, tokenId);\\r\\n        if (to.code.length != 0)\\r\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\r\\n     * are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * `startTokenId` - the first token ID to be transferred.\\r\\n     * `quantity` - the amount to be transferred.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\r\\n     * have been transferred. This includes minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * `startTokenId` - the first token ID to be transferred.\\r\\n     * `quantity` - the amount to be transferred.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * `from` - Previous owner of the given token ID.\\r\\n     * `to` - Target address that will receive the token.\\r\\n     * `tokenId` - Token ID to be transferred.\\r\\n     * `_data` - Optional data to send along with the call.\\r\\n     *\\r\\n     * Returns whether the call correctly returned the expected magic value.\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\r\\n            bytes4 retval\\r\\n        ) {\\r\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        MINT OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\r\\n        // `tokenId` has a maximum limit of 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            uint256 toMasked;\\r\\n            uint256 end = startTokenId + quantity;\\r\\n\\r\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\r\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\r\\n            // The assembly, together with the surrounding Solidity code, have been\\r\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\r\\n            assembly {\\r\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n                toMasked := and(to, _BITMASK_ADDRESS)\\r\\n                // Emit the `Transfer` event.\\r\\n                log4(\\r\\n                    0, // Start of data (0, since no data).\\r\\n                    0, // End of data (0, since no data).\\r\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\r\\n                    0, // `address(0)`.\\r\\n                    toMasked, // `to`.\\r\\n                    startTokenId // `tokenId`.\\r\\n                )\\r\\n\\r\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\r\\n                // that overflows uint256 will make the loop run out of gas.\\r\\n                // The compiler will optimize the `iszero` away for performance.\\r\\n                for {\\r\\n                    let tokenId := add(startTokenId, 1)\\r\\n                } iszero(eq(tokenId, end)) {\\r\\n                    tokenId := add(tokenId, 1)\\r\\n                } {\\r\\n                    // Emit the `Transfer` event. Similar to above.\\r\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\r\\n                }\\r\\n            }\\r\\n            if (toMasked == 0) revert MintToZeroAddress();\\r\\n\\r\\n            _currentIndex = end;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * This function is intended for efficient minting only during contract creation.\\r\\n     *\\r\\n     * It emits only one {ConsecutiveTransfer} as defined in\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\r\\n     * instead of a sequence of {Transfer} event(s).\\r\\n     *\\r\\n     * Calling this function outside of contract creation WILL make your contract\\r\\n     * non-compliant with the ERC721 standard.\\r\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\r\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {ConsecutiveTransfer} event.\\r\\n     */\\r\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\r\\n\\r\\n            _currentIndex = startTokenId + quantity;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * See {_mint}.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, quantity);\\r\\n\\r\\n        unchecked {\\r\\n            if (to.code.length != 0) {\\r\\n                uint256 end = _currentIndex;\\r\\n                uint256 index = end - quantity;\\r\\n                do {\\r\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (index < end);\\r\\n                // Reentrancy protection.\\r\\n                if (_currentIndex != end) revert();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\r\\n        _safeMint(to, quantity, '');\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        BURN OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\r\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance -= 1`.\\r\\n            // - `numberBurned += 1`.\\r\\n            //\\r\\n            // We can directly decrement the balance, and increment the number burned.\\r\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\r\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the last owner.\\r\\n            // - `startTimestamp` to the timestamp of burning.\\r\\n            // - `burned` to `true`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                from,\\r\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                     EXTRA DATA OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Directly sets the extra data for the ownership data `index`.\\r\\n     */\\r\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\r\\n        uint256 packed = _packedOwnerships[index];\\r\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\r\\n        uint256 extraDataCasted;\\r\\n        // Cast `extraData` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            extraDataCasted := extraData\\r\\n        }\\r\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\r\\n        _packedOwnerships[index] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\r\\n     * Intended to be overridden by the cosumer contract.\\r\\n     *\\r\\n     * `previousExtraData` - the value of `extraData` before transfer.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _extraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint24 previousExtraData\\r\\n    ) internal view virtual returns (uint24) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next extra data for the packed ownership data.\\r\\n     * The returned result is shifted into position.\\r\\n     */\\r\\n    function _nextExtraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 prevOwnershipPacked\\r\\n    ) private view returns (uint256) {\\r\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\r\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                       OTHER OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n     *\\r\\n     * If you are writing GSN compatible contracts, you need to override this function.\\r\\n     */\\r\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\r\\n     */\\r\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\r\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\r\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\r\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\r\\n            let m := add(mload(0x40), 0xa0)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, m)\\r\\n            // Assign the `str` to the end.\\r\\n            str := sub(m, 0x20)\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := str\\r\\n\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            // prettier-ignore\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := sub(str, 1)\\r\\n                // Write the character to the pointer.\\r\\n                // The ASCII index of the '0' character is 48.\\r\\n                mstore8(str, add(48, mod(temp, 10)))\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n                // prettier-ignore\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            let length := sub(end, str)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            str := sub(str, 0x20)\\r\\n            // Store the length.\\r\\n            mstore(str, length)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb49b2cdc1997584a095fe56bfa9880e9880c3106e1303fd060087e148b41d537\",\"license\":\"MIT\"},\"contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721A.\\r\\n */\\r\\ninterface IERC721A {\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * Cannot query the balance for the zero address.\\r\\n     */\\r\\n    error BalanceQueryForZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * Cannot mint to the zero address.\\r\\n     */\\r\\n    error MintToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The quantity of tokens minted must be more than zero.\\r\\n     */\\r\\n    error MintZeroQuantity();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error OwnerQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token must be owned by `from`.\\r\\n     */\\r\\n    error TransferFromIncorrectOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot safely transfer to a contract that does not implement the\\r\\n     * ERC721Receiver interface.\\r\\n     */\\r\\n    error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n    /**\\r\\n     * Cannot transfer to the zero address.\\r\\n     */\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error URIQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\r\\n     */\\r\\n    error MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n    /**\\r\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\r\\n     */\\r\\n    error OwnershipNotInitializedForExtraData();\\r\\n\\r\\n    // =============================================================\\r\\n    //                            STRUCTS\\r\\n    // =============================================================\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\r\\n        uint24 extraData;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                         TOKEN COUNTERS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC165\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC721\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables\\r\\n     * (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\r\\n     * checking first that contract recipients are aware of the ERC721 protocol\\r\\n     * to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move\\r\\n     * this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\r\\n     * whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the\\r\\n     * zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n     * for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    // =============================================================\\r\\n    //                        IERC721Metadata\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    // =============================================================\\r\\n    //                           IERC2309\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\r\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\r\\n     *\\r\\n     * See {_mintERC2309} for more details.\\r\\n     */\\r\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\r\\n}\",\"keccak256\":\"0x0cc0cb5618668629dac85790004802788f3d70ac70a915f40cd93eae2a3a8449\",\"license\":\"MIT\"},\"contracts/NFTIsERC721A.sol\":{\"content\":\"pragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\n\\r\\ncontract NFTIsERC721A is ERC721A {\\r\\n    constructor() ERC721A(\\\"Ben BK\\\", \\\"BBK\\\") {}\\r\\n\\r\\n    function mint(uint256 quantity) external payable {\\r\\n        // `_mint`'s second argument now takes in a `quantity`, not a `tokenId`.\\r\\n        _mint(msg.sender, quantity);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa59a1c25b72d025ae91def887d6203a251fa621e1ad8f3f73763bc55e13401d0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f42656e20424b00000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42424b000000000000000000000000000000000000000000000000000000000081525081600290816200008f91906200033f565b508060039081620000a191906200033f565b50620000b2620000c060201b60201c565b600081905550505062000426565b600090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200014757607f821691505b6020821081036200015d576200015c620000ff565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000188565b620001d3868362000188565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002206200021a6200021484620001eb565b620001f5565b620001eb565b9050919050565b6000819050919050565b6200023c83620001ff565b620002546200024b8262000227565b84845462000195565b825550505050565b600090565b6200026b6200025c565b6200027881848462000231565b505050565b5b81811015620002a0576200029460008262000261565b6001810190506200027e565b5050565b601f821115620002ef57620002b98162000163565b620002c48462000178565b81016020851015620002d4578190505b620002ec620002e38562000178565b8301826200027d565b50505b505050565b600082821c905092915050565b60006200031460001984600802620002f4565b1980831691505092915050565b60006200032f838362000301565b9150826002028217905092915050565b6200034a82620000c5565b67ffffffffffffffff811115620003665762000365620000d0565b5b6200037282546200012e565b6200037f828285620002a4565b600060209050601f831160018114620003b75760008415620003a2578287015190505b620003ae858262000321565b8655506200041e565b601f198416620003c78662000163565b60005b82811015620003f157848901518255600182019150602085019450602081019050620003ca565b868310156200041157848901516200040d601f89168262000301565b8355505b6001600288020188555050505b505050505050565b611b0a80620004366000396000f3fe6080604052600436106100e85760003560e01c80636352211e1161008a578063a22cb46511610059578063a22cb465146102d2578063b88d4fde146102fb578063c87b56dd14610317578063e985e9c514610354576100e8565b80636352211e1461021157806370a082311461024e57806395d89b411461028b578063a0712d68146102b6576100e8565b8063095ea7b3116100c6578063095ea7b31461019257806318160ddd146101ae57806323b872dd146101d957806342842e0e146101f5576100e8565b806301ffc9a7146100ed57806306fdde031461012a578063081812fc14610155575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f91906113e3565b610391565b604051610121919061142b565b60405180910390f35b34801561013657600080fd5b5061013f610423565b60405161014c91906114d6565b60405180910390f35b34801561016157600080fd5b5061017c6004803603810190610177919061152e565b6104b5565b604051610189919061159c565b60405180910390f35b6101ac60048036038101906101a791906115e3565b610534565b005b3480156101ba57600080fd5b506101c3610678565b6040516101d09190611632565b60405180910390f35b6101f360048036038101906101ee919061164d565b61068f565b005b61020f600480360381019061020a919061164d565b6109b1565b005b34801561021d57600080fd5b506102386004803603810190610233919061152e565b6109d1565b604051610245919061159c565b60405180910390f35b34801561025a57600080fd5b50610275600480360381019061027091906116a0565b6109e3565b6040516102829190611632565b60405180910390f35b34801561029757600080fd5b506102a0610a9b565b6040516102ad91906114d6565b60405180910390f35b6102d060048036038101906102cb919061152e565b610b2d565b005b3480156102de57600080fd5b506102f960048036038101906102f491906116f9565b610b3a565b005b6103156004803603810190610310919061186e565b610c45565b005b34801561032357600080fd5b5061033e6004803603810190610339919061152e565b610cb8565b60405161034b91906114d6565b60405180910390f35b34801561036057600080fd5b5061037b600480360381019061037691906118f1565b610d56565b604051610388919061142b565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ec57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061041c5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60606002805461043290611960565b80601f016020809104026020016040519081016040528092919081815260200182805461045e90611960565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006104c082610dea565b6104f6576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053f826109d1565b90508073ffffffffffffffffffffffffffffffffffffffff16610560610e49565b73ffffffffffffffffffffffffffffffffffffffff16146105c35761058c81610587610e49565b610d56565b6105c2576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610682610e51565b6001546000540303905090565b600061069a82610e56565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610701576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061070d84610f22565b91509150610723818761071e610e49565b610f49565b61076f5761073886610733610e49565b610d56565b61076e576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036107d5576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107e28686866001610f8d565b80156107ed57600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154600101919050819055506108bb85610897888887610f93565b7c020000000000000000000000000000000000000000000000000000000017610fbb565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610941576000600185019050600060046000838152602001908152602001600020540361093f57600054811461093e578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46109a98686866001610fe6565b505050505050565b6109cc83838360405180602001604052806000815250610c45565b505050565b60006109dc82610e56565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a4a576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b606060038054610aaa90611960565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad690611960565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050505050905090565b610b373382610fec565b50565b8060076000610b47610e49565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610bf4610e49565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610c39919061142b565b60405180910390a35050565b610c5084848461068f565b60008373ffffffffffffffffffffffffffffffffffffffff163b14610cb257610c7b848484846111a7565b610cb1576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6060610cc382610dea565b610cf9576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d036112f7565b90506000815103610d235760405180602001604052806000815250610d4e565b80610d2d8461130e565b604051602001610d3e9291906119cd565b6040516020818303038152906040525b915050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081610df5610e51565b11158015610e04575060005482105b8015610e42575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b60008082905080610e65610e51565b11610eeb57600054811015610eea5760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603610ee8575b60008103610ede576004600083600190039350838152602001908152602001600020549050610eb4565b8092505050610f1d565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8610faa86868461135e565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6000805490506000820361102c576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110396000848385610f8d565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506110b0836110a16000866000610f93565b6110aa85611367565b17610fbb565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b81811461115157808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050611116565b506000820361118c576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008190555050506111a26000848385610fe6565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111cd610e49565b8786866040518563ffffffff1660e01b81526004016111ef9493929190611a46565b6020604051808303816000875af192505050801561122b57506040513d601f19601f820116820180604052508101906112289190611aa7565b60015b6112a4573d806000811461125b576040519150601f19603f3d011682016040523d82523d6000602084013e611260565b606091505b50600081510361129c576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060405180602001604052806000815250905090565b606060a060405101806040526020810391506000825281835b60011561134957600184039350600a81066030018453600a8104905080611327575b50828103602084039350808452505050919050565b60009392505050565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6113c08161138b565b81146113cb57600080fd5b50565b6000813590506113dd816113b7565b92915050565b6000602082840312156113f9576113f8611381565b5b6000611407848285016113ce565b91505092915050565b60008115159050919050565b61142581611410565b82525050565b6000602082019050611440600083018461141c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611480578082015181840152602081019050611465565b60008484015250505050565b6000601f19601f8301169050919050565b60006114a882611446565b6114b28185611451565b93506114c2818560208601611462565b6114cb8161148c565b840191505092915050565b600060208201905081810360008301526114f0818461149d565b905092915050565b6000819050919050565b61150b816114f8565b811461151657600080fd5b50565b60008135905061152881611502565b92915050565b60006020828403121561154457611543611381565b5b600061155284828501611519565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115868261155b565b9050919050565b6115968161157b565b82525050565b60006020820190506115b1600083018461158d565b92915050565b6115c08161157b565b81146115cb57600080fd5b50565b6000813590506115dd816115b7565b92915050565b600080604083850312156115fa576115f9611381565b5b6000611608858286016115ce565b925050602061161985828601611519565b9150509250929050565b61162c816114f8565b82525050565b60006020820190506116476000830184611623565b92915050565b60008060006060848603121561166657611665611381565b5b6000611674868287016115ce565b9350506020611685868287016115ce565b925050604061169686828701611519565b9150509250925092565b6000602082840312156116b6576116b5611381565b5b60006116c4848285016115ce565b91505092915050565b6116d681611410565b81146116e157600080fd5b50565b6000813590506116f3816116cd565b92915050565b600080604083850312156117105761170f611381565b5b600061171e858286016115ce565b925050602061172f858286016116e4565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61177b8261148c565b810181811067ffffffffffffffff8211171561179a57611799611743565b5b80604052505050565b60006117ad611377565b90506117b98282611772565b919050565b600067ffffffffffffffff8211156117d9576117d8611743565b5b6117e28261148c565b9050602081019050919050565b82818337600083830152505050565b600061181161180c846117be565b6117a3565b90508281526020810184848401111561182d5761182c61173e565b5b6118388482856117ef565b509392505050565b600082601f83011261185557611854611739565b5b81356118658482602086016117fe565b91505092915050565b6000806000806080858703121561188857611887611381565b5b6000611896878288016115ce565b94505060206118a7878288016115ce565b93505060406118b887828801611519565b925050606085013567ffffffffffffffff8111156118d9576118d8611386565b5b6118e587828801611840565b91505092959194509250565b6000806040838503121561190857611907611381565b5b6000611916858286016115ce565b9250506020611927858286016115ce565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061197857607f821691505b60208210810361198b5761198a611931565b5b50919050565b600081905092915050565b60006119a782611446565b6119b18185611991565b93506119c1818560208601611462565b80840191505092915050565b60006119d9828561199c565b91506119e5828461199c565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000611a18826119f1565b611a2281856119fc565b9350611a32818560208601611462565b611a3b8161148c565b840191505092915050565b6000608082019050611a5b600083018761158d565b611a68602083018661158d565b611a756040830185611623565b8181036060830152611a878184611a0d565b905095945050505050565b600081519050611aa1816113b7565b92915050565b600060208284031215611abd57611abc611381565b5b6000611acb84828501611a92565b9150509291505056fea26469706673582212206239a881addb1d17dc7d9201cee16f33ab6b2166492bdeeb1fcd390e4d80bd4c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80636352211e1161008a578063a22cb46511610059578063a22cb465146102d2578063b88d4fde146102fb578063c87b56dd14610317578063e985e9c514610354576100e8565b80636352211e1461021157806370a082311461024e57806395d89b411461028b578063a0712d68146102b6576100e8565b8063095ea7b3116100c6578063095ea7b31461019257806318160ddd146101ae57806323b872dd146101d957806342842e0e146101f5576100e8565b806301ffc9a7146100ed57806306fdde031461012a578063081812fc14610155575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f91906113e3565b610391565b604051610121919061142b565b60405180910390f35b34801561013657600080fd5b5061013f610423565b60405161014c91906114d6565b60405180910390f35b34801561016157600080fd5b5061017c6004803603810190610177919061152e565b6104b5565b604051610189919061159c565b60405180910390f35b6101ac60048036038101906101a791906115e3565b610534565b005b3480156101ba57600080fd5b506101c3610678565b6040516101d09190611632565b60405180910390f35b6101f360048036038101906101ee919061164d565b61068f565b005b61020f600480360381019061020a919061164d565b6109b1565b005b34801561021d57600080fd5b506102386004803603810190610233919061152e565b6109d1565b604051610245919061159c565b60405180910390f35b34801561025a57600080fd5b50610275600480360381019061027091906116a0565b6109e3565b6040516102829190611632565b60405180910390f35b34801561029757600080fd5b506102a0610a9b565b6040516102ad91906114d6565b60405180910390f35b6102d060048036038101906102cb919061152e565b610b2d565b005b3480156102de57600080fd5b506102f960048036038101906102f491906116f9565b610b3a565b005b6103156004803603810190610310919061186e565b610c45565b005b34801561032357600080fd5b5061033e6004803603810190610339919061152e565b610cb8565b60405161034b91906114d6565b60405180910390f35b34801561036057600080fd5b5061037b600480360381019061037691906118f1565b610d56565b604051610388919061142b565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ec57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061041c5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60606002805461043290611960565b80601f016020809104026020016040519081016040528092919081815260200182805461045e90611960565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006104c082610dea565b6104f6576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053f826109d1565b90508073ffffffffffffffffffffffffffffffffffffffff16610560610e49565b73ffffffffffffffffffffffffffffffffffffffff16146105c35761058c81610587610e49565b610d56565b6105c2576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610682610e51565b6001546000540303905090565b600061069a82610e56565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610701576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061070d84610f22565b91509150610723818761071e610e49565b610f49565b61076f5761073886610733610e49565b610d56565b61076e576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036107d5576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107e28686866001610f8d565b80156107ed57600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154600101919050819055506108bb85610897888887610f93565b7c020000000000000000000000000000000000000000000000000000000017610fbb565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610941576000600185019050600060046000838152602001908152602001600020540361093f57600054811461093e578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46109a98686866001610fe6565b505050505050565b6109cc83838360405180602001604052806000815250610c45565b505050565b60006109dc82610e56565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a4a576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b606060038054610aaa90611960565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad690611960565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050505050905090565b610b373382610fec565b50565b8060076000610b47610e49565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610bf4610e49565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610c39919061142b565b60405180910390a35050565b610c5084848461068f565b60008373ffffffffffffffffffffffffffffffffffffffff163b14610cb257610c7b848484846111a7565b610cb1576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6060610cc382610dea565b610cf9576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d036112f7565b90506000815103610d235760405180602001604052806000815250610d4e565b80610d2d8461130e565b604051602001610d3e9291906119cd565b6040516020818303038152906040525b915050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081610df5610e51565b11158015610e04575060005482105b8015610e42575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b60008082905080610e65610e51565b11610eeb57600054811015610eea5760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603610ee8575b60008103610ede576004600083600190039350838152602001908152602001600020549050610eb4565b8092505050610f1d565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8610faa86868461135e565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6000805490506000820361102c576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110396000848385610f8d565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506110b0836110a16000866000610f93565b6110aa85611367565b17610fbb565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b81811461115157808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050611116565b506000820361118c576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008190555050506111a26000848385610fe6565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111cd610e49565b8786866040518563ffffffff1660e01b81526004016111ef9493929190611a46565b6020604051808303816000875af192505050801561122b57506040513d601f19601f820116820180604052508101906112289190611aa7565b60015b6112a4573d806000811461125b576040519150601f19603f3d011682016040523d82523d6000602084013e611260565b606091505b50600081510361129c576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060405180602001604052806000815250905090565b606060a060405101806040526020810391506000825281835b60011561134957600184039350600a81066030018453600a8104905080611327575b50828103602084039350808452505050919050565b60009392505050565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6113c08161138b565b81146113cb57600080fd5b50565b6000813590506113dd816113b7565b92915050565b6000602082840312156113f9576113f8611381565b5b6000611407848285016113ce565b91505092915050565b60008115159050919050565b61142581611410565b82525050565b6000602082019050611440600083018461141c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611480578082015181840152602081019050611465565b60008484015250505050565b6000601f19601f8301169050919050565b60006114a882611446565b6114b28185611451565b93506114c2818560208601611462565b6114cb8161148c565b840191505092915050565b600060208201905081810360008301526114f0818461149d565b905092915050565b6000819050919050565b61150b816114f8565b811461151657600080fd5b50565b60008135905061152881611502565b92915050565b60006020828403121561154457611543611381565b5b600061155284828501611519565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115868261155b565b9050919050565b6115968161157b565b82525050565b60006020820190506115b1600083018461158d565b92915050565b6115c08161157b565b81146115cb57600080fd5b50565b6000813590506115dd816115b7565b92915050565b600080604083850312156115fa576115f9611381565b5b6000611608858286016115ce565b925050602061161985828601611519565b9150509250929050565b61162c816114f8565b82525050565b60006020820190506116476000830184611623565b92915050565b60008060006060848603121561166657611665611381565b5b6000611674868287016115ce565b9350506020611685868287016115ce565b925050604061169686828701611519565b9150509250925092565b6000602082840312156116b6576116b5611381565b5b60006116c4848285016115ce565b91505092915050565b6116d681611410565b81146116e157600080fd5b50565b6000813590506116f3816116cd565b92915050565b600080604083850312156117105761170f611381565b5b600061171e858286016115ce565b925050602061172f858286016116e4565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61177b8261148c565b810181811067ffffffffffffffff8211171561179a57611799611743565b5b80604052505050565b60006117ad611377565b90506117b98282611772565b919050565b600067ffffffffffffffff8211156117d9576117d8611743565b5b6117e28261148c565b9050602081019050919050565b82818337600083830152505050565b600061181161180c846117be565b6117a3565b90508281526020810184848401111561182d5761182c61173e565b5b6118388482856117ef565b509392505050565b600082601f83011261185557611854611739565b5b81356118658482602086016117fe565b91505092915050565b6000806000806080858703121561188857611887611381565b5b6000611896878288016115ce565b94505060206118a7878288016115ce565b93505060406118b887828801611519565b925050606085013567ffffffffffffffff8111156118d9576118d8611386565b5b6118e587828801611840565b91505092959194509250565b6000806040838503121561190857611907611381565b5b6000611916858286016115ce565b9250506020611927858286016115ce565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061197857607f821691505b60208210810361198b5761198a611931565b5b50919050565b600081905092915050565b60006119a782611446565b6119b18185611991565b93506119c1818560208601611462565b80840191505092915050565b60006119d9828561199c565b91506119e5828461199c565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000611a18826119f1565b611a2281856119fc565b9350611a32818560208601611462565b611a3b8161148c565b840191505092915050565b6000608082019050611a5b600083018761158d565b611a68602083018661158d565b611a756040830185611623565b8181036060830152611a878184611a0d565b905095945050505050565b600081519050611aa1816113b7565b92915050565b600060208284031215611abd57611abc611381565b5b6000611acb84828501611a92565b9150509291505056fea26469706673582212206239a881addb1d17dc7d9201cee16f33ab6b2166492bdeeb1fcd390e4d80bd4c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 91,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 93,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 95,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 97,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 101,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 105,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 110,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)23_storage)"
      },
      {
        "astId": 116,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)23_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)23_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)23_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 22,
            "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}