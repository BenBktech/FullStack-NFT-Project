{
  "address": "0x2279b7a0a67db372996a5fab50d91eaa73d2ebe6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTIsERC721A_NftsWalletExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTIsERC721A_NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTIsERC721A_NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTIsERC721A_SupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_amountNFTsPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleStartTime",
          "type": "uint256"
        }
      ],
      "name": "setSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x774bc68468aa2f9afa5a5a1f036dc1c88a8a39af85c8f91acb7247bf52b2976e",
  "receipt": {
    "to": null,
    "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
    "contractAddress": "0x2279b7a0a67db372996a5fab50d91eaa73d2ebe6",
    "transactionIndex": "0x0",
    "gasUsed": "0x230584",
    "logsBloom": "0x
    "blockHash": "0x542ba5f89d97ffca26d4401c4eb51e6e15dfbd96ef59c0d6ded0cded4952836c",
    "transactionHash": "0x774bc68468aa2f9afa5a5a1f036dc1c88a8a39af85c8f91acb7247bf52b2976e",
    "logs": [],
    "blockNumber": "0x9",
    "cumulativeGasUsed": "0x230584",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "72af5296fa71b13beeded758087f8692",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTIsERC721A_NftsWalletExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTIsERC721A_NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTIsERC721A_NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTIsERC721A_SupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_amountNFTsPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleStartTime\",\"type\":\"uint256\"}],\"name\":\"setSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTIsERC721A.sol\":\"NFTIsERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport './IERC721A.sol';\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721 token receiver.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC721A\\r\\n *\\r\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\r\\n * Non-Fungible Token Standard, including the Metadata extension.\\r\\n * Optimized for lower gas during batch mints.\\r\\n *\\r\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\r\\n * starting from `_startTokenId()`.\\r\\n *\\r\\n * Assumptions:\\r\\n *\\r\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\r\\n    struct TokenApprovalRef {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                           CONSTANTS\\r\\n    // =============================================================\\r\\n\\r\\n    // Mask of an entry in packed address data.\\r\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n    // The bit position of `numberMinted` in packed address data.\\r\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n    // The bit position of `numberBurned` in packed address data.\\r\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n    // The bit position of `aux` in packed address data.\\r\\n    uint256 private constant _BITPOS_AUX = 192;\\r\\n\\r\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n    // The bit position of `startTimestamp` in packed ownership.\\r\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n    // The bit mask of the `burned` bit in packed ownership.\\r\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n    // The bit position of `extraData` in packed ownership.\\r\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\r\\n\\r\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\r\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\r\\n\\r\\n    // The mask of the lower 160 bits for addresses.\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\r\\n    // This limit is to prevent overflows on the address data entries.\\r\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\r\\n    // is required to cause an overflow, which is unrealistic.\\r\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\r\\n\\r\\n    // The `Transfer` event signature is given by:\\r\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\r\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\r\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n    // =============================================================\\r\\n    //                            STORAGE\\r\\n    // =============================================================\\r\\n\\r\\n    // The next token ID to be minted.\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 private _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned.\\r\\n    // See {_packedOwnershipOf} implementation for details.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..159]   `addr`\\r\\n    // - [160..223] `startTimestamp`\\r\\n    // - [224]      `burned`\\r\\n    // - [225]      `nextInitialized`\\r\\n    // - [232..255] `extraData`\\r\\n    mapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n    // Mapping owner address to address data.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..63]    `balance`\\r\\n    // - [64..127]  `numberMinted`\\r\\n    // - [128..191] `numberBurned`\\r\\n    // - [192..255] `aux`\\r\\n    mapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n    // Mapping from token ID to approved address.\\r\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // =============================================================\\r\\n    //                          CONSTRUCTOR\\r\\n    // =============================================================\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                   TOKEN COUNTING OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the starting token ID.\\r\\n     * To change the starting token ID, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next token ID to be minted.\\r\\n     */\\r\\n    function _nextTokenId() internal view virtual returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than `_currentIndex - _startTokenId()` times.\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view virtual returns (uint256) {\\r\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\r\\n        // and it is initialized to `_startTokenId()`.\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens burned.\\r\\n     */\\r\\n    function _totalBurned() internal view virtual returns (uint256) {\\r\\n        return _burnCounter;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                    ADDRESS DATA OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal virtual {\\r\\n        uint256 packed = _packedAddressData[owner];\\r\\n        uint256 auxCasted;\\r\\n        // Cast `aux` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            auxCasted := aux\\r\\n        }\\r\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\r\\n        _packedAddressData[owner] = packed;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC165\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        // The interface IDs are constants representing the first 4 bytes\\r\\n        // of the XOR of all function selectors in the interface.\\r\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\r\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        IERC721Metadata\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, it can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                     OWNERSHIPS OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\r\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n     */\\r\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\r\\n        return _unpackedOwnership(_packedOwnerships[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n     */\\r\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\r\\n        if (_packedOwnerships[index] == 0) {\\r\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the packed ownership data of `tokenId`.\\r\\n     */\\r\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() <= curr)\\r\\n                if (curr < _currentIndex) {\\r\\n                    uint256 packed = _packedOwnerships[curr];\\r\\n                    // If not burned.\\r\\n                    if (packed & _BITMASK_BURNED == 0) {\\r\\n                        // Invariant:\\r\\n                        // There will always be an initialized ownership slot\\r\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\r\\n                        // before an unintialized ownership slot\\r\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\r\\n                        // Hence, `curr` will not underflow.\\r\\n                        //\\r\\n                        // We can directly compare the packed value.\\r\\n                        // If the address is zero, packed will be zero.\\r\\n                        while (packed == 0) {\\r\\n                            packed = _packedOwnerships[--curr];\\r\\n                        }\\r\\n                        return packed;\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n     */\\r\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\r\\n        ownership.addr = address(uint160(packed));\\r\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\r\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\r\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Packs ownership data into a single uint256.\\r\\n     */\\r\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, _BITMASK_ADDRESS)\\r\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\r\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\r\\n     */\\r\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\r\\n        // For branchless setting of the `nextInitialized` flag.\\r\\n        assembly {\\r\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\r\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                      APPROVAL OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the\\r\\n     * zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        if (_msgSenderERC721A() != owner)\\r\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n                revert ApprovalCallerNotOwnerNorApproved();\\r\\n            }\\r\\n\\r\\n        _tokenApprovals[tokenId].value = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId].value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n     * for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted. See {_mint}.\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return\\r\\n            _startTokenId() <= tokenId &&\\r\\n            tokenId < _currentIndex && // If within bounds,\\r\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\r\\n     */\\r\\n    function _isSenderApprovedOrOwner(\\r\\n        address approvedAddress,\\r\\n        address owner,\\r\\n        address msgSender\\r\\n    ) private pure returns (bool result) {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, _BITMASK_ADDRESS)\\r\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\r\\n            // `msgSender == owner || msgSender == approvedAddress`.\\r\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\r\\n     */\\r\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\r\\n    {\\r\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\r\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\r\\n        assembly {\\r\\n            approvedAddressSlot := tokenApproval.slot\\r\\n            approvedAddress := sload(approvedAddressSlot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                      TRANSFER OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable virtual override {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\r\\n\\r\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\r\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // We can directly increment and decrement the balances.\\r\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the next owner.\\r\\n            // - `startTimestamp` to the timestamp of transfering.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public payable virtual override {\\r\\n        transferFrom(from, to, tokenId);\\r\\n        if (to.code.length != 0)\\r\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\r\\n     * are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * `startTokenId` - the first token ID to be transferred.\\r\\n     * `quantity` - the amount to be transferred.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\r\\n     * have been transferred. This includes minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * `startTokenId` - the first token ID to be transferred.\\r\\n     * `quantity` - the amount to be transferred.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * `from` - Previous owner of the given token ID.\\r\\n     * `to` - Target address that will receive the token.\\r\\n     * `tokenId` - Token ID to be transferred.\\r\\n     * `_data` - Optional data to send along with the call.\\r\\n     *\\r\\n     * Returns whether the call correctly returned the expected magic value.\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\r\\n            bytes4 retval\\r\\n        ) {\\r\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        MINT OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\r\\n        // `tokenId` has a maximum limit of 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            uint256 toMasked;\\r\\n            uint256 end = startTokenId + quantity;\\r\\n\\r\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\r\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\r\\n            // The assembly, together with the surrounding Solidity code, have been\\r\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\r\\n            assembly {\\r\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n                toMasked := and(to, _BITMASK_ADDRESS)\\r\\n                // Emit the `Transfer` event.\\r\\n                log4(\\r\\n                    0, // Start of data (0, since no data).\\r\\n                    0, // End of data (0, since no data).\\r\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\r\\n                    0, // `address(0)`.\\r\\n                    toMasked, // `to`.\\r\\n                    startTokenId // `tokenId`.\\r\\n                )\\r\\n\\r\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\r\\n                // that overflows uint256 will make the loop run out of gas.\\r\\n                // The compiler will optimize the `iszero` away for performance.\\r\\n                for {\\r\\n                    let tokenId := add(startTokenId, 1)\\r\\n                } iszero(eq(tokenId, end)) {\\r\\n                    tokenId := add(tokenId, 1)\\r\\n                } {\\r\\n                    // Emit the `Transfer` event. Similar to above.\\r\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\r\\n                }\\r\\n            }\\r\\n            if (toMasked == 0) revert MintToZeroAddress();\\r\\n\\r\\n            _currentIndex = end;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * This function is intended for efficient minting only during contract creation.\\r\\n     *\\r\\n     * It emits only one {ConsecutiveTransfer} as defined in\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\r\\n     * instead of a sequence of {Transfer} event(s).\\r\\n     *\\r\\n     * Calling this function outside of contract creation WILL make your contract\\r\\n     * non-compliant with the ERC721 standard.\\r\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\r\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {ConsecutiveTransfer} event.\\r\\n     */\\r\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\r\\n\\r\\n            _currentIndex = startTokenId + quantity;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * See {_mint}.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, quantity);\\r\\n\\r\\n        unchecked {\\r\\n            if (to.code.length != 0) {\\r\\n                uint256 end = _currentIndex;\\r\\n                uint256 index = end - quantity;\\r\\n                do {\\r\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (index < end);\\r\\n                // Reentrancy protection.\\r\\n                if (_currentIndex != end) revert();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\r\\n        _safeMint(to, quantity, '');\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        BURN OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\r\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance -= 1`.\\r\\n            // - `numberBurned += 1`.\\r\\n            //\\r\\n            // We can directly decrement the balance, and increment the number burned.\\r\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\r\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the last owner.\\r\\n            // - `startTimestamp` to the timestamp of burning.\\r\\n            // - `burned` to `true`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                from,\\r\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                     EXTRA DATA OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Directly sets the extra data for the ownership data `index`.\\r\\n     */\\r\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\r\\n        uint256 packed = _packedOwnerships[index];\\r\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\r\\n        uint256 extraDataCasted;\\r\\n        // Cast `extraData` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            extraDataCasted := extraData\\r\\n        }\\r\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\r\\n        _packedOwnerships[index] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\r\\n     * Intended to be overridden by the cosumer contract.\\r\\n     *\\r\\n     * `previousExtraData` - the value of `extraData` before transfer.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _extraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint24 previousExtraData\\r\\n    ) internal view virtual returns (uint24) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next extra data for the packed ownership data.\\r\\n     * The returned result is shifted into position.\\r\\n     */\\r\\n    function _nextExtraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 prevOwnershipPacked\\r\\n    ) private view returns (uint256) {\\r\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\r\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                       OTHER OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n     *\\r\\n     * If you are writing GSN compatible contracts, you need to override this function.\\r\\n     */\\r\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\r\\n     */\\r\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\r\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\r\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\r\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\r\\n            let m := add(mload(0x40), 0xa0)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, m)\\r\\n            // Assign the `str` to the end.\\r\\n            str := sub(m, 0x20)\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := str\\r\\n\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            // prettier-ignore\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := sub(str, 1)\\r\\n                // Write the character to the pointer.\\r\\n                // The ASCII index of the '0' character is 48.\\r\\n                mstore8(str, add(48, mod(temp, 10)))\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n                // prettier-ignore\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            let length := sub(end, str)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            str := sub(str, 0x20)\\r\\n            // Store the length.\\r\\n            mstore(str, length)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb49b2cdc1997584a095fe56bfa9880e9880c3106e1303fd060087e148b41d537\",\"license\":\"MIT\"},\"contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721A.\\r\\n */\\r\\ninterface IERC721A {\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * Cannot query the balance for the zero address.\\r\\n     */\\r\\n    error BalanceQueryForZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * Cannot mint to the zero address.\\r\\n     */\\r\\n    error MintToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The quantity of tokens minted must be more than zero.\\r\\n     */\\r\\n    error MintZeroQuantity();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error OwnerQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token must be owned by `from`.\\r\\n     */\\r\\n    error TransferFromIncorrectOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot safely transfer to a contract that does not implement the\\r\\n     * ERC721Receiver interface.\\r\\n     */\\r\\n    error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n    /**\\r\\n     * Cannot transfer to the zero address.\\r\\n     */\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error URIQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\r\\n     */\\r\\n    error MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n    /**\\r\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\r\\n     */\\r\\n    error OwnershipNotInitializedForExtraData();\\r\\n\\r\\n    // =============================================================\\r\\n    //                            STRUCTS\\r\\n    // =============================================================\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\r\\n        uint24 extraData;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                         TOKEN COUNTERS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC165\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC721\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables\\r\\n     * (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\r\\n     * checking first that contract recipients are aware of the ERC721 protocol\\r\\n     * to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move\\r\\n     * this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\r\\n     * whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the\\r\\n     * zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n     * for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    // =============================================================\\r\\n    //                        IERC721Metadata\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    // =============================================================\\r\\n    //                           IERC2309\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\r\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\r\\n     *\\r\\n     * See {_mintERC2309} for more details.\\r\\n     */\\r\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\r\\n}\",\"keccak256\":\"0x0cc0cb5618668629dac85790004802788f3d70ac70a915f40cd93eae2a3a8449\",\"license\":\"MIT\"},\"contracts/NFTIsERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\n\\r\\nerror NFTIsERC721A_NotOwner();\\r\\nerror NFTIsERC721A_OnlyIfYouMint();\\r\\nerror NFTIsERC721A_SupplyExceeded();\\r\\nerror NFTIsERC721A_NftsWalletExceeded();\\r\\nerror NFTIsERC721A_NotEnoughFunds();\\r\\n\\r\\ncontract NFTIsERC721A is ERC721A {\\r\\n    using Strings for uint;\\r\\n\\r\\n    uint256 private constant S_PRICE = 0.01 ether;\\r\\n    uint256 private constant S_NUMBER_OF_NFTS = 30;\\r\\n    uint256 private s_saleStartTime = 4234234;\\r\\n    address private immutable i_owner;\\r\\n    string private s_baseURI;\\r\\n\\r\\n    mapping(address => uint) public s_amountNFTsPerWallet;\\r\\n    uint private constant S_NUMBER_OF_NFTS_PER_WALLET = 3;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if(msg.sender != i_owner) {\\r\\n            revert NFTIsERC721A_NotOwner();\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    constructor() ERC721A(\\\"Ben BK\\\", \\\"BBK\\\") {\\r\\n       i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 quantity) external payable {\\r\\n        uint price = getPrice();\\r\\n        if(totalSupply() + quantity > S_NUMBER_OF_NFTS) {\\r\\n            revert NFTIsERC721A_SupplyExceeded();\\r\\n        }\\r\\n        if(s_amountNFTsPerWallet[msg.sender] + quantity > S_NUMBER_OF_NFTS_PER_WALLET) {\\r\\n            revert NFTIsERC721A_NftsWalletExceeded();\\r\\n        }\\r\\n        if(msg.value < price * quantity) {\\r\\n            revert NFTIsERC721A_NotEnoughFunds();\\r\\n        }\\r\\n        s_amountNFTsPerWallet[msg.sender] += quantity;\\r\\n        _safeMint(msg.sender, quantity);\\r\\n    }\\r\\n\\r\\n    function setSaleStartTime(uint256 saleStartTime) external onlyOwner {\\r\\n        s_saleStartTime = saleStartTime;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\r\\n        s_baseURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint _tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(_tokenId), \\\"URI query for nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(s_baseURI, _tokenId.toString(), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function getPrice() public pure returns(uint) {\\r\\n        return S_PRICE;\\r\\n    }\\r\\n\\r\\n    function getSaleStartTime() public view returns(uint) {\\r\\n        return s_saleStartTime;\\r\\n    }\\r\\n\\r\\n    function getBaseURI() public view returns(string memory) {\\r\\n        return s_baseURI;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns(address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1d6b007653d9c904a9e61b91866da768f325e2490a7c215eeccebfe201744fb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c8063714c5398116100ab578063a22cb4651161006f578063a22cb465146103f2578063b88d4fde1461041b578063c2b1ddaf14610437578063c87b56dd14610462578063e160317a1461049f578063e985e9c5146104dc57610135565b8063714c53981461032a578063893d20e81461035557806395d89b411461038057806398d5fdca146103ab578063a0712d68146103d657610135565b806323b872dd116100fd57806323b872dd1461022657806342842e0e14610242578063525f8a5c1461025e57806355f804b3146102875780636352211e146102b057806370a08231146102ed57610135565b806301ffc9a71461013a57806306fdde0314610177578063081812fc146101a2578063095ea7b3146101df57806318160ddd146101fb575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190611a72565b610519565b60405161016e9190611aba565b60405180910390f35b34801561018357600080fd5b5061018c6105ab565b6040516101999190611b65565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190611bbd565b61063d565b6040516101d69190611c2b565b60405180910390f35b6101f960048036038101906101f49190611c72565b6106bc565b005b34801561020757600080fd5b50610210610800565b60405161021d9190611cc1565b60405180910390f35b610240600480360381019061023b9190611cdc565b610817565b005b61025c60048036038101906102579190611cdc565b610b39565b005b34801561026a57600080fd5b5061028560048036038101906102809190611bbd565b610b59565b005b34801561029357600080fd5b506102ae60048036038101906102a99190611e64565b610be1565b005b3480156102bc57600080fd5b506102d760048036038101906102d29190611bbd565b610c69565b6040516102e49190611c2b565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190611ead565b610c7b565b6040516103219190611cc1565b60405180910390f35b34801561033657600080fd5b5061033f610d33565b60405161034c9190611b65565b60405180910390f35b34801561036157600080fd5b5061036a610dc5565b6040516103779190611c2b565b60405180910390f35b34801561038c57600080fd5b50610395610ded565b6040516103a29190611b65565b60405180910390f35b3480156103b757600080fd5b506103c0610e7f565b6040516103cd9190611cc1565b60405180910390f35b6103f060048036038101906103eb9190611bbd565b610e8e565b005b3480156103fe57600080fd5b5061041960048036038101906104149190611f06565b611015565b005b61043560048036038101906104309190611fe7565b611120565b005b34801561044357600080fd5b5061044c611193565b6040516104599190611cc1565b60405180910390f35b34801561046e57600080fd5b5061048960048036038101906104849190611bbd565b61119d565b6040516104969190611b65565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c19190611ead565b611219565b6040516104d39190611cc1565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe919061206a565b611231565b6040516105109190611aba565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057457506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105a45750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600280546105ba906120d9565b80601f01602080910402602001604051908101604052809291908181526020018280546105e6906120d9565b80156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b5050505050905090565b6000610648826112c5565b61067e576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106c782610c69565b90508073ffffffffffffffffffffffffffffffffffffffff166106e8611324565b73ffffffffffffffffffffffffffffffffffffffff161461074b576107148161070f611324565b611231565b61074a576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600061080a61132c565b6001546000540303905090565b600061082282611331565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610889576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610895846113fd565b915091506108ab81876108a6611324565b611424565b6108f7576108c0866108bb611324565b611231565b6108f6576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361095d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61096a8686866001611468565b801561097557600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610a4385610a1f88888761146e565b7c020000000000000000000000000000000000000000000000000000000017611496565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610ac95760006001850190506000600460008381526020019081526020016000205403610ac7576000548114610ac6578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b3186868660016114c1565b505050505050565b610b5483838360405180602001604052806000815250611120565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f30d5c90900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c66576040517f30d5c90900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000610c7482611331565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ce2576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b606060098054610d42906120d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6e906120d9565b8015610dbb5780601f10610d9057610100808354040283529160200191610dbb565b820191906000526020600020905b815481529060010190602001808311610d9e57829003601f168201915b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060038054610dfc906120d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e28906120d9565b8015610e755780601f10610e4a57610100808354040283529160200191610e75565b820191906000526020600020905b815481529060010190602001808311610e5857829003601f168201915b5050505050905090565b6000662386f26fc10000905090565b6000610e98610e7f565b9050601e82610ea5610800565b610eaf91906122c8565b1115610ee7576040517f2b273f4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3491906122c8565b1115610f6c576040517fb5b0acfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181610f7891906122fc565b341015610fb1576040517f69cd1d6d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461100091906122c8565b9250508190555061101133836114c7565b5050565b8060076000611022611324565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166110cf611324565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111149190611aba565b60405180910390a35050565b61112b848484610817565b60008373ffffffffffffffffffffffffffffffffffffffff163b1461118d57611156848484846114e5565b61118c576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6000600854905090565b60606111a8826112c5565b6111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de9061238a565b60405180910390fd5b60096111f283611635565b6040516020016112039291906124b5565b6040516020818303038152906040529050919050565b600a6020528060005260406000206000915090505481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000816112d061132c565b111580156112df575060005482105b801561131d575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b6000808290508061134061132c565b116113c6576000548110156113c55760006004600083815260200190815260200160002054905060007c01000000000000000000000000000000000000000000000000000000008216036113c3575b600081036113b957600460008360019003935083815260200190815260200160002054905061138f565b80925050506113f8565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611485868684611795565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6114e182826040518060200160405280600081525061179e565b5050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261150b611324565b8786866040518563ffffffff1660e01b815260040161152d9493929190612539565b6020604051808303816000875af192505050801561156957506040513d601f19601f82011682018060405250810190611566919061259a565b60015b6115e2573d8060008114611599576040519150601f19603f3d011682016040523d82523d6000602084013e61159e565b606091505b5060008151036115da576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b60606000820361167c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611790565b600082905060005b600082146116ae578080611697906125c7565b915050600a826116a7919061263e565b9150611684565b60008167ffffffffffffffff8111156116ca576116c9611d39565b5b6040519080825280601f01601f1916602001820160405280156116fc5781602001600182028036833780820191505090505b5090505b6000851461178957600182611715919061266f565b9150600a8561172491906126a3565b603061173091906122c8565b60f81b818381518110611746576117456126d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611782919061263e565b9450611700565b8093505050505b919050565b60009392505050565b6117a8838361183b565b60008373ffffffffffffffffffffffffffffffffffffffff163b1461183657600080549050600083820390505b6117e860008683806001019450866114e5565b61181e576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106117d557816000541461183357600080fd5b50505b505050565b6000805490506000820361187b576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118886000848385611468565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506118ff836118f0600086600061146e565b6118f9856119f6565b17611496565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b8181146119a057808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050611965565b50600082036119db576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008190555050506119f160008483856114c1565b505050565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a4f81611a1a565b8114611a5a57600080fd5b50565b600081359050611a6c81611a46565b92915050565b600060208284031215611a8857611a87611a10565b5b6000611a9684828501611a5d565b91505092915050565b60008115159050919050565b611ab481611a9f565b82525050565b6000602082019050611acf6000830184611aab565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b0f578082015181840152602081019050611af4565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b3782611ad5565b611b418185611ae0565b9350611b51818560208601611af1565b611b5a81611b1b565b840191505092915050565b60006020820190508181036000830152611b7f8184611b2c565b905092915050565b6000819050919050565b611b9a81611b87565b8114611ba557600080fd5b50565b600081359050611bb781611b91565b92915050565b600060208284031215611bd357611bd2611a10565b5b6000611be184828501611ba8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c1582611bea565b9050919050565b611c2581611c0a565b82525050565b6000602082019050611c406000830184611c1c565b92915050565b611c4f81611c0a565b8114611c5a57600080fd5b50565b600081359050611c6c81611c46565b92915050565b60008060408385031215611c8957611c88611a10565b5b6000611c9785828601611c5d565b9250506020611ca885828601611ba8565b9150509250929050565b611cbb81611b87565b82525050565b6000602082019050611cd66000830184611cb2565b92915050565b600080600060608486031215611cf557611cf4611a10565b5b6000611d0386828701611c5d565b9350506020611d1486828701611c5d565b9250506040611d2586828701611ba8565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d7182611b1b565b810181811067ffffffffffffffff82111715611d9057611d8f611d39565b5b80604052505050565b6000611da3611a06565b9050611daf8282611d68565b919050565b600067ffffffffffffffff821115611dcf57611dce611d39565b5b611dd882611b1b565b9050602081019050919050565b82818337600083830152505050565b6000611e07611e0284611db4565b611d99565b905082815260208101848484011115611e2357611e22611d34565b5b611e2e848285611de5565b509392505050565b600082601f830112611e4b57611e4a611d2f565b5b8135611e5b848260208601611df4565b91505092915050565b600060208284031215611e7a57611e79611a10565b5b600082013567ffffffffffffffff811115611e9857611e97611a15565b5b611ea484828501611e36565b91505092915050565b600060208284031215611ec357611ec2611a10565b5b6000611ed184828501611c5d565b91505092915050565b611ee381611a9f565b8114611eee57600080fd5b50565b600081359050611f0081611eda565b92915050565b60008060408385031215611f1d57611f1c611a10565b5b6000611f2b85828601611c5d565b9250506020611f3c85828601611ef1565b9150509250929050565b600067ffffffffffffffff821115611f6157611f60611d39565b5b611f6a82611b1b565b9050602081019050919050565b6000611f8a611f8584611f46565b611d99565b905082815260208101848484011115611fa657611fa5611d34565b5b611fb1848285611de5565b509392505050565b600082601f830112611fce57611fcd611d2f565b5b8135611fde848260208601611f77565b91505092915050565b6000806000806080858703121561200157612000611a10565b5b600061200f87828801611c5d565b945050602061202087828801611c5d565b935050604061203187828801611ba8565b925050606085013567ffffffffffffffff81111561205257612051611a15565b5b61205e87828801611fb9565b91505092959194509250565b6000806040838503121561208157612080611a10565b5b600061208f85828601611c5d565b92505060206120a085828601611c5d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806120f157607f821691505b602082108103612104576121036120aa565b5b50919050565b60008190508160005260206000209050919050565b600082821b905092915050565b60006008830261215c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261211f565b612166868361211f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006121a361219e61219984611b87565b61217e565b611b87565b9050919050565b6000819050919050565b6121bd83612188565b6121d16121c9826121aa565b84845461212c565b825550505050565b600090565b6121e66121d9565b6121f18184846121b4565b505050565b81811015612214576122096000826121de565b6001810190506121f6565b5050565b600082821c905092915050565b600061223660001984600802612218565b1980831691505092915050565b8281101561226857848901518255600182019150602085019450602081019050612243565b868310156122855784890151612281601f891682612225565b8355505b600160028802018855505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122d382611b87565b91506122de83611b87565b92508282019050808211156122f6576122f5612299565b5b92915050565b600061230782611b87565b915061231283611b87565b925082820261232081611b87565b9150828204841483151761233757612336612299565b5b5092915050565b7f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e00600082015250565b6000612374601f83611ae0565b915061237f8261233e565b602082019050919050565b600060208201905081810360008301526123a381612367565b9050919050565b600081905092915050565b600081546123c2816120d9565b6123cc81866123aa565b945060018216600081146123e757600181146123fc5761242f565b60ff198316865281151582028601935061242f565b6124058561210a565b60005b8381101561242757815481890152600182019150602081019050612408565b838801955050505b50505092915050565b600061244382611ad5565b61244d81856123aa565b935061245d818560208601611af1565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b600061249f6005836123aa565b91506124aa82612469565b600582019050919050565b60006124c182856123b5565b91506124cd8284612438565b91506124d882612492565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061250b826124e4565b61251581856124ef565b9350612525818560208601611af1565b61252e81611b1b565b840191505092915050565b600060808201905061254e6000830187611c1c565b61255b6020830186611c1c565b6125686040830185611cb2565b818103606083015261257a8184612500565b905095945050505050565b60008151905061259481611a46565b92915050565b6000602082840312156125b0576125af611a10565b5b60006125be84828501612585565b91505092915050565b60006125d282611b87565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361260457612603612299565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061264982611b87565b915061265483611b87565b9250826126645761266361260f565b5b828204905092915050565b600061267a82611b87565b915061268583611b87565b925082820390508181111561269d5761269c612299565b5b92915050565b60006126ae82611b87565b91506126b983611b87565b9250826126c9576126c861260f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122014b81e3f69a03ce0f13d19d382d5b2022de520465eb4166b6535d6046997044d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 317,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 319,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 321,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 327,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 331,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 336,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)249_storage)"
      },
      {
        "astId": 342,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2082,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "s_saleStartTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2086,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "s_baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2090,
        "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
        "label": "s_amountNFTsPerWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)249_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)249_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)249_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 248,
            "contract": "contracts/NFTIsERC721A.sol:NFTIsERC721A",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}